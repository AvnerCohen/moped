Read:
  Attempt to connect to up to 3 matching servers before erroring.
  Preference:
    - Primary:
      - No primary available then raise error. This is default.
    - PrimaryPreferred:
      - Read from the primary, unless the primary is unavailable.
      - If a tag set is provided, read from seondaries that match the tag.
        If none match, raise an error.
      - If no tag set is provided, read from any available secondary.
    - Secondary:
      - Read only from secondary nodes, if no secondary is available then
        raise an error.
      - If a tag set was provided, then read from a secondary with a matching
        tag. If none is available then raise an error.
    - SecondaryPreferred:
      - Attempt to read from a secondary node. If none is available then read
        from the primary.
      - If a tag set was included, then attempt to read from a secondary node
        with a matching tag. If none is found raise an error.
    - Nearest:
      - Read from the nearest member in the set, based on ping time (primary
        or secondary is allowed.
      - If a tag set is provided, then read from the closest matching, raising
        an error if none match.
Write:
  Concern:
    - Propogate
    - Unverified

Cluster:
  - @primary
  - Ring: @secondaries
  - Ring: @arbiters
  - Ring: @mongos

Ring:
  - Array<Node>: @nodes

Node:
  - Connection (taken from global pool)
  - primary?
  - seondary?
  - arbiter?
  - mongos?
  - Unit of work: checkout connection from pool, do stuff, check connection back in.

ConnectionPool:
  - Lazy initialize connections up to max size.
  - Hash: @connections { address: [ connection, ... ] }
  - checkout(resolved_address)

Session:
  - @read_preference
  - @write_concern
  - @current_database
  - @cluster

Collection:
  - insert(documents):
      write = Write.new(cluster, write_concern)
      write.execute(Protocol::Insert.new(documents))

Query:
  - find(selector):
      read = Read.new(cluster, read_preference)
      read.execute(Protocol::Query.new(selector)) (return Cursor)
